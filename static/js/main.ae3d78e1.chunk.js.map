{"version":3,"sources":["components/pages/recipe.module.css","components/pages/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","label","calories","imgsrc","ingredients","className","recipeModule","recipe","map","ingredient","text","image","src","alt","App","useState","recipts","setRecipes","search","setSearch","query","setQuery","RecipeRq","useEffect","getRecipes","a","fetch","rs","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mNCiB3CC,EAfA,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YACzC,OACE,yBAAKC,UAAWC,IAAaC,QAC3B,4BAAKN,GACL,wCAAcC,GACd,4BACGE,EAAYI,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,UAGpB,yBAAKL,UAAWC,IAAaK,MAAOC,IAAKT,EAAQU,IAAI,UCoD5CC,EA5DH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,WANnB,mBAMTK,EANS,KAMFC,EANE,KASVC,EAAQ,0CAAsCF,EAAtC,mBARC,WAQD,oBAPE,mCAOF,sBAFG,GAEH,yCAEdG,qBAAU,WACRC,MACC,CAACJ,IAEJ,IAAMI,EAAU,uCAAG,8BAAAC,EAAA,sEACAC,MAAMJ,GADN,cACXK,EADW,gBAEEA,EAAGC,OAFL,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,yBAAKzB,UAAU,OACb,0BAAMA,UAAU,OAAO4B,SARP,SAAAC,GAClBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,MAMN,2BACEd,UAAU,aACV+B,KAAK,OACLC,MAAOnB,EACPoB,SAjBa,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,UAkBf,4BAAQhC,UAAU,cAAc+B,KAAK,UAArC,WAIF,yBAAK/B,UAAU,WACZW,EAAQR,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CACEiC,IAAKjC,EAAOA,OAAON,MACnBA,MAAOM,EAAOA,OAAON,MACrBC,SAAUK,EAAOA,OAAOL,SACxBC,OAAQI,EAAOA,OAAOI,MACtBP,YAAaG,EAAOA,OAAOH,oBC7CnBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.ae3d78e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3oj3W\",\"image\":\"recipe_image__3g57G\"};","import React from \"react\";\r\nimport recipeModule from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({ label, calories, imgsrc, ingredients }) => {\r\n  return (\r\n    <div className={recipeModule.recipe}>\r\n      <h2>{label}</h2>\r\n      <p>Calories: {calories}</p>\r\n      <ol>\r\n        {ingredients.map(ingredient => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <img className={recipeModule.image} src={imgsrc} alt=\"piz\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport Recipe from \"./components/pages/Recipe\";\n\nconst App = () => {\n  const APP_ID = \"dbfd5783\";\n  const APP_KEY = \"f27344330a414fade1cb5581635ef53e\";\n\n  const [recipts, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const quantity = 30;\n\n  const RecipeRq = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=${quantity}&calories=591-722&health=alcohol-free`;\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const rs = await fetch(RecipeRq);\n    const data = await rs.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const updateQuery = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form className=\"form\" onSubmit={updateQuery}>\n        <input\n          className=\"input-form\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"button-form\" type=\"Submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipts.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            label={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            imgsrc={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}